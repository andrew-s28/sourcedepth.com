/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RedirectRouteImport } from './routes/redirect'
import { Route as PrivacyRouteImport } from './routes/privacy'
import { Route as AboutSiteRouteImport } from './routes/about-site'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProjectsIndexRouteImport } from './routes/projects.index'
import { Route as BlogIndexRouteImport } from './routes/blog.index'
import { Route as ProjectsCategoryRouteImport } from './routes/projects_.$category'
import { Route as BlogCategoryRouteImport } from './routes/blog_.$category'
import { Route as ProjectsPostsSlugRouteImport } from './routes/projects_.posts.$slug'
import { Route as BlogPostsSlugRouteImport } from './routes/blog_.posts.$slug'

const RedirectRoute = RedirectRouteImport.update({
  id: '/redirect',
  path: '/redirect',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivacyRoute = PrivacyRouteImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutSiteRoute = AboutSiteRouteImport.update({
  id: '/about-site',
  path: '/about-site',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsIndexRoute = ProjectsIndexRouteImport.update({
  id: '/projects/',
  path: '/projects/',
  getParentRoute: () => rootRouteImport,
} as any)
const BlogIndexRoute = BlogIndexRouteImport.update({
  id: '/blog/',
  path: '/blog/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsCategoryRoute = ProjectsCategoryRouteImport.update({
  id: '/projects_/$category',
  path: '/projects/$category',
  getParentRoute: () => rootRouteImport,
} as any)
const BlogCategoryRoute = BlogCategoryRouteImport.update({
  id: '/blog_/$category',
  path: '/blog/$category',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsPostsSlugRoute = ProjectsPostsSlugRouteImport.update({
  id: '/projects_/posts/$slug',
  path: '/projects/posts/$slug',
  getParentRoute: () => rootRouteImport,
} as any)
const BlogPostsSlugRoute = BlogPostsSlugRouteImport.update({
  id: '/blog_/posts/$slug',
  path: '/blog/posts/$slug',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/about-site': typeof AboutSiteRoute
  '/privacy': typeof PrivacyRoute
  '/redirect': typeof RedirectRoute
  '/blog/$category': typeof BlogCategoryRoute
  '/projects/$category': typeof ProjectsCategoryRoute
  '/blog': typeof BlogIndexRoute
  '/projects': typeof ProjectsIndexRoute
  '/blog/posts/$slug': typeof BlogPostsSlugRoute
  '/projects/posts/$slug': typeof ProjectsPostsSlugRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/about-site': typeof AboutSiteRoute
  '/privacy': typeof PrivacyRoute
  '/redirect': typeof RedirectRoute
  '/blog/$category': typeof BlogCategoryRoute
  '/projects/$category': typeof ProjectsCategoryRoute
  '/blog': typeof BlogIndexRoute
  '/projects': typeof ProjectsIndexRoute
  '/blog/posts/$slug': typeof BlogPostsSlugRoute
  '/projects/posts/$slug': typeof ProjectsPostsSlugRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/about-site': typeof AboutSiteRoute
  '/privacy': typeof PrivacyRoute
  '/redirect': typeof RedirectRoute
  '/blog_/$category': typeof BlogCategoryRoute
  '/projects_/$category': typeof ProjectsCategoryRoute
  '/blog/': typeof BlogIndexRoute
  '/projects/': typeof ProjectsIndexRoute
  '/blog_/posts/$slug': typeof BlogPostsSlugRoute
  '/projects_/posts/$slug': typeof ProjectsPostsSlugRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/about-site'
    | '/privacy'
    | '/redirect'
    | '/blog/$category'
    | '/projects/$category'
    | '/blog'
    | '/projects'
    | '/blog/posts/$slug'
    | '/projects/posts/$slug'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/about-site'
    | '/privacy'
    | '/redirect'
    | '/blog/$category'
    | '/projects/$category'
    | '/blog'
    | '/projects'
    | '/blog/posts/$slug'
    | '/projects/posts/$slug'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/about-site'
    | '/privacy'
    | '/redirect'
    | '/blog_/$category'
    | '/projects_/$category'
    | '/blog/'
    | '/projects/'
    | '/blog_/posts/$slug'
    | '/projects_/posts/$slug'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  AboutSiteRoute: typeof AboutSiteRoute
  PrivacyRoute: typeof PrivacyRoute
  RedirectRoute: typeof RedirectRoute
  BlogCategoryRoute: typeof BlogCategoryRoute
  ProjectsCategoryRoute: typeof ProjectsCategoryRoute
  BlogIndexRoute: typeof BlogIndexRoute
  ProjectsIndexRoute: typeof ProjectsIndexRoute
  BlogPostsSlugRoute: typeof BlogPostsSlugRoute
  ProjectsPostsSlugRoute: typeof ProjectsPostsSlugRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/redirect': {
      id: '/redirect'
      path: '/redirect'
      fullPath: '/redirect'
      preLoaderRoute: typeof RedirectRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about-site': {
      id: '/about-site'
      path: '/about-site'
      fullPath: '/about-site'
      preLoaderRoute: typeof AboutSiteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/': {
      id: '/projects/'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blog/': {
      id: '/blog/'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof BlogIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects_/$category': {
      id: '/projects_/$category'
      path: '/projects/$category'
      fullPath: '/projects/$category'
      preLoaderRoute: typeof ProjectsCategoryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blog_/$category': {
      id: '/blog_/$category'
      path: '/blog/$category'
      fullPath: '/blog/$category'
      preLoaderRoute: typeof BlogCategoryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects_/posts/$slug': {
      id: '/projects_/posts/$slug'
      path: '/projects/posts/$slug'
      fullPath: '/projects/posts/$slug'
      preLoaderRoute: typeof ProjectsPostsSlugRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blog_/posts/$slug': {
      id: '/blog_/posts/$slug'
      path: '/blog/posts/$slug'
      fullPath: '/blog/posts/$slug'
      preLoaderRoute: typeof BlogPostsSlugRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  AboutSiteRoute: AboutSiteRoute,
  PrivacyRoute: PrivacyRoute,
  RedirectRoute: RedirectRoute,
  BlogCategoryRoute: BlogCategoryRoute,
  ProjectsCategoryRoute: ProjectsCategoryRoute,
  BlogIndexRoute: BlogIndexRoute,
  ProjectsIndexRoute: ProjectsIndexRoute,
  BlogPostsSlugRoute: BlogPostsSlugRoute,
  ProjectsPostsSlugRoute: ProjectsPostsSlugRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
